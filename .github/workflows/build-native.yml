name: Build JNI Native Libraries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux Builds
          - os: linux
            arch: x64
            runner: ubuntu-24.04
            output: libprotobuf-java-linux-amd64.so

          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            cross_prefix: aarch64-linux-gnu-
            output: libprotobuf-java-linux-arm64.so

          # Windows Builds
          - os: windows
            arch: x64
            runner: windows-2025
            vcpkg_triplet: x64-windows-static
            output: protobuf-java-windows-amd64.dll

          - os: windows
            arch: arm64
            runner: windows-11-arm
            vcpkg_triplet: arm64-windows-static
            output: protobuf-java-windows-arm64.dll

          # macOS Builds
          - os: macos
            arch: x64
            runner: macos-13
            output: libprotobuf-java-macos-intel.dylib

          - os: macos
            arch: arm64
            runner: macos-15
            output: libprotobuf-java-macos-silicon.dylib

          # Android Build (ARM64 only)
          - os: android
            arch: arm64-v8a
            runner: ubuntu-24.04
            output: libprotobuf-java-android-arm64-v8a.so
            ndk_arch: android-arm64
            ndk_toolchain_prefix: aarch64-linux-android
            api_level: 21

    steps:
      - name: ðŸ“¦ Checkout code (this repository)
        uses: actions/checkout@v4

      # --- START: New steps to fetch native.cpp ---
      - name: ðŸ“¥ Download native.cpp from private repo
        uses: actions/checkout@v4
        with:
          # The private repository to fetch the file from
          repository: knoxthedev/knoxobf
          # Use the secret PAT you created for authentication
          token: ${{ secrets.PAT_FOR_KNOXOBF }}
          # Check out the private repo into a temporary subdirectory
          path: 'temp_obf_repo'

      - name: ðŸšš Place native.cpp for build
        run: mv temp_obf_repo/native.cpp .
      # --- END: New steps ---

      - name: ðŸ”§ Setup JDK 21
        if: matrix.os != 'android'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: ðŸ›  Install tools (Linux/Android)
        if: startsWith(matrix.runner, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ make perl wget zlib1g-dev build-essential git

      - name: ðŸ›  Install tools (macOS)
        if: matrix.os == 'macos'
        run: |
          brew update
          brew install openssl@3

      - name: ðŸ›  Install OpenSSL (Windows)
        if: matrix.os == 'windows'
        uses: johnwason/vcpkg-action@v7
        with:
          triplet: ${{ matrix.vcpkg_triplet }}
          pkgs: openssl
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ”§ Setup Android NDK
        if: matrix.os == 'android'
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c # Pinned for stability

      - name: ðŸ§± Build static OpenSSL (Linux)
        if: matrix.os == 'linux'
        run: |
          export OPENSSL_STATIC_ROOT="$GITHUB_WORKSPACE/openssl-static"
          wget https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz
          tar -xzf openssl-3.5.0.tar.gz
          cd openssl-3.5.0
          TARGET=$([[ "${{ matrix.arch }}" == "arm64" ]] && echo "linux-aarch64" || echo "linux-x86_64")
          ./Configure "$TARGET" no-shared no-dynamic-engine --prefix="$OPENSSL_STATIC_ROOT"
          make -j$(nproc)
          make install_sw
          if [ -d "$OPENSSL_STATIC_ROOT/lib64" ]; then mv "$OPENSSL_STATIC_ROOT/lib64" "$OPENSSL_STATIC_ROOT/lib"; fi

      - name: ðŸ§± Build static OpenSSL (Android)
        if: matrix.os == 'android'
        shell: bash
        run: |
          export OPENSSL_ANDROID_ROOT="$GITHUB_WORKSPACE/openssl-android"
          export ANDROID_NDK_ROOT="${{ steps.setup-ndk.outputs.ndk-path }}"
          export PATH="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          git clone --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          ./Configure ${{ matrix.ndk_arch }} -D__ANDROID_API__=${{ matrix.api_level }} no-shared --prefix="$OPENSSL_ANDROID_ROOT"
          make -j$(nproc)
          make install_sw

      - name: ðŸŽ¯ Build (Linux/macOS)
        if: matrix.os == 'linux' || matrix.os == 'macos'
        shell: bash
        run: |
          JNI_INC="$JAVA_HOME/include"
          JNI_OS_INC="$JNI_INC/$([[ "${{ matrix.os }}" == "macos" ]] && echo "darwin" || echo "linux")"
          PREFIX="${{ matrix.cross_prefix || '' }}"

          if [[ "${{ matrix.os }}" == "macos" ]]; then
            OPENSSL_ROOT=$(brew --prefix openssl@3)
            ${PREFIX}g++ -std=c++17 -fPIC -shared native.cpp \
              -I"$JNI_INC" -I"$JNI_OS_INC" \
              -I"$OPENSSL_ROOT/include" \
              "$OPENSSL_ROOT/lib/libssl.a" "$OPENSSL_ROOT/lib/libcrypto.a" -lz -o "${{ matrix.output }}"
          else
            OPENSSL_STATIC_ROOT="$GITHUB_WORKSPACE/openssl-static"
            ${PREFIX}g++ -std=c++17 -fPIC -shared native.cpp \
              -I"$JNI_INC" -I"$JNI_OS_INC" \
              -I"$OPENSSL_STATIC_ROOT/include" \
              "$OPENSSL_STATIC_ROOT/lib/libssl.a" "$OPENSSL_STATIC_ROOT/lib/libcrypto.a" \
              -ldl -lpthread -o "${{ matrix.output }}"
          fi

      - name: ðŸŽ¯ Build (Windows)
        if: matrix.os == 'windows'
        shell: cmd
        run: |
          FOR /F "usebackq tokens=*" %%I IN (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) DO SET VS_PATH=%%I
          CALL "%VS_PATH%\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.arch }}
          SET VCPKG_ROOT=%CD%\vcpkg
          SET INCLUDE=%VCPKG_ROOT%\installed\${{ matrix.vcpkg_triplet }}\include;%INCLUDE%
          SET LIB=%VCPKG_ROOT%\installed\${{ matrix.vcpkg_triplet }}\lib;%LIB%
          cl /LD /MT native.cpp ^
            /I"%JAVA_HOME%\include" /I"%JAVA_HOME%\include\win32" ^
            /link libssl.lib libcrypto.lib ws2_32.lib gdi32.lib advapi32.lib crypt32.lib user32.lib /OUT:${{ matrix.output }}

      - name: ðŸŽ¯ Build (Android)
        if: matrix.os == 'android'
        run: |
          export OPENSSL_ANDROID_ROOT="$GITHUB_WORKSPACE/openssl-android"
          export ANDROID_NDK_ROOT="${{ steps.setup-ndk.outputs.ndk-path }}"
          COMPILER="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.ndk_toolchain_prefix }}${{ matrix.api_level }}-clang++"

          $COMPILER -std=c++17 -fPIC -shared native.cpp \
            -static-libgcc -static-libstdc++ \
            -I"$ANDROID_NDK_ROOT/sysroot/usr/include" \
            -I"$OPENSSL_ANDROID_ROOT/include" \
            "$OPENSSL_ANDROID_ROOT/lib/libssl.a" "$OPENSSL_ANDROID_ROOT/lib/libcrypto.a" \
            -o "${{ matrix.output }}"

      - name: ðŸš€ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.output }}
          path: ${{ matrix.output }}

  package:
    name: Package all libraries
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: ðŸ“‚ Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: build-output-*
          merge-multiple: true

      - name: ðŸ”— Zip libraries
        run: |
          ls -R artifacts
          cd artifacts
          zip -r ../protobuf-java-libs.zip .

      - name: ðŸš€ Upload ZIP archive
        uses: actions/upload-artifact@v4
        with:
          name: protobuf-java-libs-archive
          path: protobuf-java-libs.zip
